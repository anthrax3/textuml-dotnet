// <auto-generated />

[assembly: WebActivator.PreApplicationStartMethod(typeof(TextUml.Infrastructure.MiniProfilerPackage), "PreStart")]
[assembly: WebActivator.PostApplicationStartMethod(typeof(TextUml.Infrastructure.MiniProfilerPackage), "PostStart")]

namespace TextUml.Infrastructure
{
    using System.Linq;
    using System.Web;
    using System.Web.Mvc;


    using Microsoft.Web.Infrastructure.DynamicModuleHelper;

    using StackExchange.Profiling;
    using StackExchange.Profiling.MVCHelpers;
    using StackExchange.Profiling.SqlFormatters;

    using Extensions;

    public static class MiniProfilerPackage
    {
        public static void PreStart()
        {
            MiniProfiler.Settings.SqlFormatter = new SqlServerFormatter();
            MiniProfilerEF.Initialize();

            DynamicModuleUtility.RegisterModule(typeof(MiniProfilerStartupModule));
            GlobalFilters.Filters.Add(new ProfilingActionFilter());
        }

        public static void PostStart()
        {
            var engines = ViewEngines.Engines.ToList();
            ViewEngines.Engines.Clear();

            foreach (var engine in engines)
            {
                ViewEngines.Engines.Add(new ProfilingViewEngine(engine));
            }
        }
    }

    public class MiniProfilerStartupModule : IHttpModule
    {
        public void Init(HttpApplication context)
        {
            var startedProfiling = false;

            context.BeginRequest += (sender, e) =>
            {
                var application = (HttpApplication)sender;

                if (!application.Context.CanProfile())
                {
                    return;
                }

                MiniProfiler.Start();
                startedProfiling = true;
            };

            context.EndRequest += (sender, e) =>
            {
                if (startedProfiling)
                {
                    MiniProfiler.Stop();
                }
            };
        }

        public void Dispose()
        {
        }
    }
}